{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/context/auth.js\";\nimport React, { useReducer, createContext } from 'react'; //import jwtDecode from 'jwt-decode';\n\nconst initialState = {\n  user: null\n};\n/* if (localStorage.getItem('jwtToken')) {\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem('jwtToken');\n  } else {\n    initialState.user = decodedToken;\n  }\n} */\n\nconst AuthContext = createContext({\n  user: null,\n  login: userData => {},\n  logout: () => {}\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return { ...state,\n        user: action.payload\n      };\n\n    case 'LOGOUT':\n      return { ...state,\n        user: null\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    //localStorage.setItem('jwtToken', userData.token);\n    dispatch({\n      type: 'LOGIN',\n      payload: userData\n    });\n  }\n\n  function logout() {\n    //localStorage.removeItem('jwtToken');\n    dispatch({\n      type: 'LOGOUT'\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, Object.assign({\n    value: {\n      user: state.user,\n      login,\n      logout\n    }\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport { AuthContext, AuthProvider };","map":{"version":3,"sources":["/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/context/auth.js"],"names":["React","useReducer","createContext","initialState","user","AuthContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD,C,CACA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB;AAIA;;;;;;;;;;AAUA,MAAMC,WAAW,GAAGH,aAAa,CAAC;AAChCE,EAAAA,IAAI,EAAE,IAD0B;AAEhCE,EAAAA,KAAK,EAAGC,QAAD,IAAc,CAAE,CAFS;AAGhCC,EAAAA,MAAM,EAAE,MAAM,CAAE;AAHgB,CAAD,CAAjC;;AAMA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELN,QAAAA,IAAI,EAAEO,MAAM,CAACE;AAFR,OAAP;;AAIF,SAAK,QAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELN,QAAAA,IAAI,EAAE;AAFD,OAAP;;AAIF;AACE,aAAOM,KAAP;AAZJ;AAcD;;AAED,SAASI,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBf,UAAU,CAACQ,WAAD,EAAcN,YAAd,CAApC;;AAEA,WAASG,KAAT,CAAeC,QAAf,EAAyB;AACvB;AACAS,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,IAAI,EAAE,OADC;AAEPC,MAAAA,OAAO,EAAEN;AAFF,KAAD,CAAR;AAID;;AAED,WAASC,MAAT,GAAkB;AAChB;AACAQ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD;;AAED,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAER,MAAAA,IAAI,EAAEM,KAAK,CAACN,IAAd;AAAoBE,MAAAA,KAApB;AAA2BE,MAAAA;AAA3B;AADT,KAEMO,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAMD;;AAED,SAASV,WAAT,EAAsBS,YAAtB","sourcesContent":["import React, { useReducer, createContext } from 'react';\n//import jwtDecode from 'jwt-decode';\n\nconst initialState = {\n  user: null\n};\n\n/* if (localStorage.getItem('jwtToken')) {\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem('jwtToken');\n  } else {\n    initialState.user = decodedToken;\n  }\n} */\n\nconst AuthContext = createContext({\n  user: null,\n  login: (userData) => {},\n  logout: () => {}\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return {\n        ...state,\n        user: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null\n      };\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    //localStorage.setItem('jwtToken', userData.token);\n    dispatch({\n      type: 'LOGIN',\n      payload: userData\n    });\n  }\n\n  function logout() {\n    //localStorage.removeItem('jwtToken');\n    dispatch({ type: 'LOGOUT' });\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ user: state.user, login, logout }}\n      {...props}\n    />\n  );\n}\n\nexport { AuthContext, AuthProvider };"]},"metadata":{},"sourceType":"module"}