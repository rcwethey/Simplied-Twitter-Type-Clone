{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/Pages/SinglePost.js\";\nimport React, { useContext } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { Grid, Card, Image, Button, Label, Icon } from 'semantic-ui-react';\nimport { moment } from 'moment';\nimport { AuthContext } from '../context/auth';\nimport DeleteButton from '../components/deleteButton';\nimport LikeButton from '../components/likeButton';\n\nconst SinglePost = props => {\n  const {\n    user\n  } = useContext(AuthContext);\n  const postId = props.match.params.postId;\n  const {\n    data: {\n      getPost\n    }\n  } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  });\n\n  const deletePostCallback = () => props.history.push('/');\n\n  let postMarkup; //TODO: Put a spinner here\n\n  if (!getPost) {\n    postMarkup = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 30\n      }\n    }, \"Loading...\");\n  } else {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      commentCount,\n      likeCount\n    } = getPost;\n    postMarkup = /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: \"/images/avatar/large/molly.png\",\n      size: \"small\",\n      float: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }, user), /*#__PURE__*/React.createElement(Card.Meta, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, moment(createdAt).fromNow()), /*#__PURE__*/React.createElement(Card.Description, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }, body)), /*#__PURE__*/React.createElement(Card.Content, {\n      extra: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(LikeButton, {\n      user: user,\n      post: {\n        id,\n        likes,\n        likeCount\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      as: \"div\",\n      labelposition: \"right\",\n      onClick: () => console.log('Comment on post'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      basic: true,\n      color: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      basic: true,\n      color: \"blue\",\n      pointing: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    }, commentCount)), user && user.username === username && /*#__PURE__*/React.createElement(DeleteButton, {\n      postId: id,\n      callback: deletePostCallback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 58\n      }\n    })))))));\n  }\n\n  return postMarkup;\n};\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!){\n    getPost(postId: $postId){\n      id body createdAt username likeCount commentCount \n      likes{ \n        username \n      }\n      comments{ \n        username \n        createdAt\n        body\n      }\n    }\n  }\n`;\nexport default SinglePost;","map":{"version":3,"sources":["/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/Pages/SinglePost.js"],"names":["React","useContext","gql","useQuery","Grid","Card","Image","Button","Label","Icon","moment","AuthContext","DeleteButton","LikeButton","SinglePost","props","user","postId","match","params","data","getPost","FETCH_POST_QUERY","variables","deletePostCallback","history","push","postMarkup","id","body","createdAt","username","comments","likes","commentCount","likeCount","fromNow","console","log"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport { gql, useQuery } from '@apollo/client';\nimport { Grid, Card, Image, Button, Label, Icon } from 'semantic-ui-react';\nimport { moment } from 'moment';\nimport { AuthContext } from '../context/auth';\nimport DeleteButton from '../components/deleteButton';\nimport LikeButton from '../components/likeButton';\n\nconst SinglePost = props => {\n  const { user } = useContext(AuthContext);\n  const postId = props.match.params.postId;\n  const {data: {getPost}} = useQuery(FETCH_POST_QUERY,{\n    variables: {postId}\n  })\n  \n  const deletePostCallback = () => props.history.push('/');\n  let postMarkup;\n  //TODO: Put a spinner here\n  if(!getPost){ postMarkup = <p>Loading...</p> }\n  else{ \n    const {id, body, createdAt, username, comments, likes, commentCount, likeCount} = getPost;\n    postMarkup = (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={2}>\n            <Image src='/images/avatar/large/molly.png' size='small' float='right' />\n          </Grid.Column>\n          <Grid.Column width={10}>\n            <Card fluid>\n              <Card.Content>\n                <Card.Header>{user}</Card.Header>\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                <Card.Description>{body}</Card.Description>\n              </Card.Content>\n              <Card.Content extra>\n                <LikeButton user={user} post={{ id, likes, likeCount}} />\n                <Button as=\"div\" labelposition=\"right\" onClick={(() => console.log('Comment on post'))}>\n                  <Button basic color=\"blue\">\n                    <Icon name=\"comments\"/>\n                    <Label basic color=\"blue\" pointing=\"left\">{commentCount}</Label>\n                  </Button>\n                  {user && user.username === username && <DeleteButton postId={id} callback={deletePostCallback}/>}\n                </Button>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n\n  return postMarkup;\n}\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!){\n    getPost(postId: $postId){\n      id body createdAt username likeCount commentCount \n      likes{ \n        username \n      }\n      comments{ \n        username \n        createdAt\n        body\n      }\n    }\n  }\n`;\nexport default SinglePost;"]},"metadata":{},"sourceType":"module"}