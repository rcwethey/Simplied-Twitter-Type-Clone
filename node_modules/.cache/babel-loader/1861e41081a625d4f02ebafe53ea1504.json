{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/Pages/Register.js\";\nimport React, { useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql';\n\nconst Register = () => {\n  const [values, setvalues] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n\n  const onChange = e => setvalues({ ...values,\n    [e.target.name]: e.target.value\n  });\n\n  const [addUser, {\n    loading\n  }] = useMutation(REGISTER_USER, {\n    update(proxy, result) {\n      console.log(result);\n    },\n\n    variables: values\n  });\n\n  const submitForm = e => {\n    e.preventDefault();\n    addUser();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: submitForm,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, \"Register\"), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Username\",\n    placeholder: \"Username...\",\n    type: \"text\",\n    name: \"username\",\n    onChange: onChange,\n    value: values.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Email\",\n    placeholder: \"Email...\",\n    type: \"email\",\n    name: \"email\",\n    onChange: onChange,\n    value: values.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Password\",\n    placeholder: \"Password...\",\n    type: \"password\",\n    name: \"password\",\n    onChange: onChange,\n    value: values.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"ComfirmPassword\",\n    placeholder: \"Comfirm Password...\",\n    type: \"password\",\n    name: \"comfirmPassword\",\n    onChange: onChange,\n    value: values.comfirmPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \"Register\")));\n};\n\nconst REGISTER_USER = gql`\n  mutation register($username: String!, $email: String!, $password: String!, $confirmPassword: String!){\n    register( registerInput: {username: $username, email: $email, password: $password, confirmPassword: $confirmPassword} )\n    {\n      id email username createdAt token\n    }\n  }\n`;\nexport default Register;","map":{"version":3,"sources":["/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/Pages/Register.js"],"names":["React","useState","Form","Button","useMutation","gql","Register","values","setvalues","username","email","password","confirmPassword","onChange","e","target","name","value","addUser","loading","REGISTER_USER","update","proxy","result","console","log","variables","submitForm","preventDefault","comfirmPassword"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql';\n\nconst Register = () => {\n  const [values, setvalues] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  })\n\n  const onChange = e => setvalues({...values, [e.target.name]: e.target.value});\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(proxy, result){\n      console.log(result);\n    },\n    variables: values\n  })\n  const submitForm = e => {\n    e.preventDefault();\n    addUser();\n  }\n  \n  return (\n    <div className='form-container'>\n      <Form onSubmit={submitForm} noValidate>\n        <h1>Register</h1>\n        <Form.Input label=\"Username\" placeholder=\"Username...\" type=\"text\" name=\"username\" onChange={onChange} value={values.username}/>\n        <Form.Input label=\"Email\" placeholder=\"Email...\" type=\"email\" name=\"email\" onChange={onChange} value={values.email}/>\n        <Form.Input label=\"Password\" placeholder=\"Password...\" type=\"password\" name=\"password\" onChange={onChange} value={values.password}/>\n        <Form.Input label=\"ComfirmPassword\" placeholder=\"Comfirm Password...\" type=\"password\" name=\"comfirmPassword\" onChange={onChange} value={values.comfirmPassword}/>\n        <Button type=\"submit\" primary>Register</Button>\n    </Form>\n    </div>\n  )\n}\n\nconst REGISTER_USER =gql`\n  mutation register($username: String!, $email: String!, $password: String!, $confirmPassword: String!){\n    register( registerInput: {username: $username, email: $email, password: $password, confirmPassword: $confirmPassword} )\n    {\n      id email username createdAt token\n    }\n  }\n`;\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}