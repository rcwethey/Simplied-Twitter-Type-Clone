{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/Pages/SinglePost.js\";\n//* Imported Dependencies\nimport React, { useContext, useState, useRef } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Card, Grid, Form, Transition } from 'semantic-ui-react';\nimport moment from 'moment'; //* Imported Components\n\nimport { AuthContext } from '../context/auth';\nimport LikeButton from '../components/likeButton';\nimport DeleteButton from '../components/deleteButton';\nimport CommentButton from '../components/commentButton'; //* Imported GraphQL\n\nimport { FETCH_POST_QUERY, SUBMIT_COMMENT_MUTATION } from '../util/graphQL';\n\nconst SinglePost = props => {\n  const postId = props.match.params.postId;\n  const {\n    user\n  } = useContext(AuthContext);\n  const commentInputRef = useRef(null);\n  const [comment, setComment] = useState('');\n  const {\n    data: {\n      getPost\n    } = {}\n  } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  });\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update: () => {\n      setComment('');\n      commentInputRef.current.blur();\n    },\n    variables: {\n      postId,\n      body: comment\n    }\n  });\n\n  const deletePostCallback = () => props.history.push('/');\n\n  const displayComments = (comments, id, createdAt) => {\n    return /*#__PURE__*/React.createElement(Transition.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }\n    }, comments.map(comment => /*#__PURE__*/React.createElement(Card, {\n      fluid: true,\n      key: comment.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }, user && user.username === comment.username && /*#__PURE__*/React.createElement(DeleteButton, {\n      postId: id,\n      commentId: comment.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, comment.username), /*#__PURE__*/React.createElement(Card.Meta, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }, moment(comment.createdAt).fromNow()), /*#__PURE__*/React.createElement(Card.Description, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, comment.body)))));\n  };\n\n  const commentInputCard = () => {\n    return /*#__PURE__*/React.createElement(Card, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, \"Post a Comment\"), /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui action input fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Comment...\",\n      name: \"comment\",\n      value: comment,\n      onChange: e => setComment(e.target.value),\n      ref: commentInputRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"ui button teal\",\n      disabled: comment.trim() === '',\n      onClick: submitComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, \"Submit\")))));\n  };\n\n  let postMarkup;\n\n  if (!getPost) {\n    //TODO: Put a spinner here\n    postMarkup = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 18\n      }\n    }, \"Loading...\");\n  } else {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      likeCount,\n      commentCount\n    } = getPost;\n    postMarkup = /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, username), /*#__PURE__*/React.createElement(Card.Meta, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, moment(createdAt).fromNow()), /*#__PURE__*/React.createElement(Card.Description, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, body)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Card.Content, {\n      extra: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(LikeButton, {\n      user: user,\n      post: {\n        id,\n        likeCount,\n        likes\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CommentButton, {\n      user: user,\n      post: {\n        id,\n        comments,\n        commentCount\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }), user && user.username === username && /*#__PURE__*/React.createElement(DeleteButton, {\n      postId: id,\n      callback: deletePostCallback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 58\n      }\n    }))), user && commentInputCard(), displayComments(comments, id, createdAt))));\n  }\n\n  return postMarkup;\n};\n\nexport default SinglePost;","map":{"version":3,"sources":["/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/Pages/SinglePost.js"],"names":["React","useContext","useState","useRef","useQuery","useMutation","Card","Grid","Form","Transition","moment","AuthContext","LikeButton","DeleteButton","CommentButton","FETCH_POST_QUERY","SUBMIT_COMMENT_MUTATION","SinglePost","props","postId","match","params","user","commentInputRef","comment","setComment","data","getPost","variables","submitComment","update","current","blur","body","deletePostCallback","history","push","displayComments","comments","id","createdAt","map","username","fromNow","commentInputCard","e","target","value","trim","postMarkup","likes","likeCount","commentCount"],"mappings":"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","sourcesContent":["//* Imported Dependencies\nimport React, { useContext, useState, useRef } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Card, Grid, Form, Transition} from 'semantic-ui-react';\nimport moment from 'moment';\n\n//* Imported Components\nimport { AuthContext } from '../context/auth';\nimport LikeButton from '../components/likeButton';\nimport DeleteButton from '../components/deleteButton';\nimport CommentButton from '../components/commentButton';\n\n//* Imported GraphQL\nimport {FETCH_POST_QUERY, SUBMIT_COMMENT_MUTATION} from '../util/graphQL';\n\nconst SinglePost = props => {\n  const postId = props.match.params.postId;\n  const { user } = useContext(AuthContext);\n  const commentInputRef = useRef(null);\n  const [comment, setComment] = useState('');\n\n  const { data: { getPost } ={}} = useQuery(FETCH_POST_QUERY, { variables: {postId} });\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION,{\n    update: () => {\n      setComment('');\n      commentInputRef.current.blur();\n    },\n    variables: { postId, body: comment}\n  });\n\n  const deletePostCallback = () => props.history.push('/');\n  const displayComments = (comments, id, createdAt) => {\n    return (\n    <Transition.Group>\n      {comments.map(comment => (\n        <Card fluid key={comment.id}>\n          <Card.Content>\n            {user && user.username === comment.username && (\n              <DeleteButton postId={id} commentId={comment.id} />\n            )}\n            <Card.Header>{comment.username}</Card.Header>\n            <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n            <Card.Description>{comment.body}</Card.Description>\n          </Card.Content>\n        </Card>\n      ))}\n    </Transition.Group>\n    )\n  };\n\n  const commentInputCard = () => {\n    return (\n      <Card fluid>\n        <Card.Content>\n          <p>Post a Comment</p>\n          <Form>\n            <div className=\"ui action input fluid\">\n              <input type=\"text\" placeholder=\"Comment...\" name=\"comment\" value={comment} onChange={e => setComment(e.target.value)} ref={commentInputRef}/>\n              <button type=\"submit\" className=\"ui button teal\" disabled={comment.trim() === ''} onClick={submitComment}>Submit</button>\n            </div>\n          </Form>\n        </Card.Content>\n      </Card>\n    )\n  };\n\n  let postMarkup;\n  if (!getPost) {\n    //TODO: Put a spinner here\n    postMarkup = <p>Loading...</p>\n  } else {\n    const { id, body, createdAt, username, comments, likes, likeCount, commentCount } = getPost;\n    postMarkup = (\n      <Grid>\n        <Grid.Row>\n          {/* <Grid.Column width={2}>\n            <Image\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n              size=\"small\"\n              float=\"right\"\n            />\n          </Grid.Column> */}\n          <Grid.Column width={10}>\n            <Card fluid>\n              <Card.Content>\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                <Card.Description>{body}</Card.Description>\n              </Card.Content>\n              <hr />\n              <Card.Content extra>\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\n                <CommentButton user={user} post={{id, comments, commentCount}} /> \n                {user && user.username === username && ( <DeleteButton postId={id} callback={deletePostCallback} /> )}\n              </Card.Content>\n            </Card>\n            {user && commentInputCard()}\n            {displayComments(comments, id, createdAt)}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n  return postMarkup;\n}\n\nexport default SinglePost;"]},"metadata":{},"sourceType":"module"}