{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/Pages/Home.js\";\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { Grid } from 'semantic-ui-react';\nimport PostCard from '../components/postCard';\n\nconst Home = () => {\n  let posts = '';\n  const {\n    loading,\n    data\n  } = useQuery(FETCH_POSTS_QUERY);\n\n  if (data) {\n    console.log(data);\n    posts = {\n      data: data.getPosts\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    columns: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    className: \"page-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, \"Recent Posts\")), loading ? /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, \"Loading posts..\") : posts.data && posts.data.map(post => /*#__PURE__*/React.createElement(Grid.Column, {\n    key: post.id,\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PostCard, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\nexport default Home;","map":{"version":3,"sources":["/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/Pages/Home.js"],"names":["React","useQuery","gql","Grid","PostCard","Home","posts","loading","data","FETCH_POSTS_QUERY","console","log","getPosts","map","post","id","marginBottom"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,MAAIC,KAAK,GAAG,EAAZ;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBP,QAAQ,CAACQ,iBAAD,CAAlC;;AAEA,MAAID,IAAJ,EAAU;AACRE,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAF,IAAAA,KAAK,GAAG;AAAEE,MAAAA,IAAI,EAAEA,IAAI,CAACI;AAAb,KAAR;AACD;;AACD,sBACE,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,GAAN;AAAU,IAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,EAIGL,OAAO,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADM,GAGND,KAAK,CAACE,IAAN,IACAF,KAAK,CAACE,IAAN,CAAWK,GAAX,CAAeC,IAAI,iBACjB,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAvB;AAA2B,IAAA,KAAK,EAAE;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEF,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CARJ,eAcE,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CADF;AAkBD,CA1BD;;AA4BA,MAAML,iBAAiB,GAAGP,GAAI;;;;;;;;;;;;;;;;;;;;CAA9B;AAsBA,eAAeG,IAAf","sourcesContent":["import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { Grid } from 'semantic-ui-react'\nimport PostCard from '../components/postCard'\n\nconst Home = () => {\n  let posts = ''\n  const { loading, data } = useQuery(FETCH_POSTS_QUERY);\n\n  if (data) {\n    console.log(data);\n    posts = { data: data.getPosts }\n  }\n  return (\n    <Grid columns={1}>\n      <Grid.Row className=\"page-title\">\n        <h1>Recent Posts</h1>\n      </Grid.Row>\n      {loading ? (\n        <h1>Loading posts..</h1>\n      ) : (\n        posts.data &&\n        posts.data.map(post => (\n          <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\n            <PostCard post={post} />\n          </Grid.Column>\n        ))\n      )}\n      <Grid.Row></Grid.Row>\n    </Grid>\n  )\n}\n\nconst FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}