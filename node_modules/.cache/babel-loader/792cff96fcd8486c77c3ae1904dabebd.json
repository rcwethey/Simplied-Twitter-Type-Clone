{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/Pages/Register.js\";\nimport React, { useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql';\n\nconst Register = () => {\n  const [errors, setErrors] = useState({});\n  const [values, setvalues] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n\n  const onChange = e => setvalues({ ...values,\n    [e.target.name]: e.target.value\n  });\n\n  const [addUser, {\n    loading\n  }] = useMutation(REGISTER_USER, {\n    update(proxy, result) {\n      console.log(result);\n    },\n\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n\n    variables: values\n  });\n\n  const submitForm = e => {\n    e.preventDefault();\n    addUser();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: submitForm,\n    noValidate: true,\n    className: laoding ? 'loading' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, \"Register\"), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Username\",\n    placeholder: \"Username...\",\n    type: \"text\",\n    error: errors.username ? true : false,\n    name: \"username\",\n    onChange: onChange,\n    value: values.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Email\",\n    placeholder: \"Email...\",\n    type: \"email\",\n    error: errors.email ? true : false,\n    name: \"email\",\n    onChange: onChange,\n    value: values.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Password\",\n    placeholder: \"Password...\",\n    type: \"password\",\n    error: errors.password ? true : false,\n    name: \"password\",\n    onChange: onChange,\n    value: values.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    l: true,\n    abel: \"ComfirmPassword\",\n    placeholder: \"Comfirm Password...\",\n    type: \"password\",\n    error: errors.comfirmPassword ? true : false,\n    name: \"comfirmPassword\",\n    onChange: onChange,\n    value: values.comfirmPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Register\")), Object.keys(errors).length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui error message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, Object.values(errors).map(value => /*#__PURE__*/React.createElement(\"li\", {\n    key: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, value)))));\n};\n\nconst REGISTER_USER = gql`\n  mutation register($username: String!, $email: String!, $password: String!, $confirmPassword: String!){\n    register( registerInput: {username: $username, email: $email, password: $password, confirmPassword: $confirmPassword} )\n    {\n      id email username createdAt token\n    }\n  }\n`;\nexport default Register;","map":{"version":3,"sources":["/Users/ryanwethey/Documents/Developer/graphQL Projects/MERNG/client/src/Pages/Register.js"],"names":["React","useState","Form","Button","useMutation","gql","Register","errors","setErrors","values","setvalues","username","email","password","confirmPassword","onChange","e","target","name","value","addUser","loading","REGISTER_USER","update","proxy","result","console","log","onError","err","graphQLErrors","extensions","exception","variables","submitForm","preventDefault","laoding","comfirmPassword","Object","keys","length","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql';\n\nconst Register = () => {\n  const [errors, setErrors] = useState({})\n  const [values, setvalues] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  })\n\n  const onChange = e => setvalues({...values, [e.target.name]: e.target.value});\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(proxy, result){\n      console.log(result);\n    },\n    onError(err){ setErrors(err.graphQLErrors[0].extensions.exception.errors) },\n    variables: values\n  })\n  const submitForm = e => {\n    e.preventDefault();\n    addUser();\n  }\n  \n  return (\n    <div className='form-container'>\n      <Form onSubmit={submitForm} noValidate className={laoding ? 'loading' : ''}>\n        <h1>Register</h1>\n        <Form.Input \n          label=\"Username\"\n          placeholder=\"Username...\"\n          type=\"text\"\n          error={errors.username ? true : false}\n          name=\"username\"\n          onChange={onChange}\n          value={values.username}/>\n        <Form.Input \n          label=\"Email\" \n          placeholder=\"Email...\" \n          type=\"email\" \n          error={errors.email ? true : false}\n          name=\"email\" \n          onChange={onChange} \n          value={values.email}/>\n        <Form.Input \n          label=\"Password\" \n          placeholder=\"Password...\" \n          type=\"password\"\n          error={errors.password ? true : false} \n          name=\"password\" \n          onChange={onChange} \n          value={values.password}/>\n        <Form.Input l\n          abel=\"ComfirmPassword\" \n          placeholder=\"Comfirm Password...\" \n          type=\"password\" \n          error={errors.comfirmPassword ? true : false}\n          name=\"comfirmPassword\" \n          onChange={onChange} \n          value={values.comfirmPassword}/>\n        <Button type=\"submit\" primary>Register</Button>\n    </Form>\n    {Object.keys(errors).length > 0 && (\n      <div className=\"ui error message\">\n        <ul className=\"list\">\n          {Object.values(errors).map((value) => (\n            <li key={value}>{value}</li>\n          ))}\n        </ul>\n      </div>\n    )}\n    </div>\n  )\n}\n\nconst REGISTER_USER =gql`\n  mutation register($username: String!, $email: String!, $password: String!, $confirmPassword: String!){\n    register( registerInput: {username: $username, email: $email, password: $password, confirmPassword: $confirmPassword} )\n    {\n      id email username createdAt token\n    }\n  }\n`;\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}